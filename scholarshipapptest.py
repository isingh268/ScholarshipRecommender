# -*- coding: utf-8 -*-
"""ScholarshipAppTest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y7LWhObJYHNsSaFBI8eRL9iaclv1Rxxz
"""

import requests
from bs4 import BeautifulSoup
import openai
import streamlit as st

# Set OpenAI API Key


# Function to scrape scholarship data
def scrape_scholarship_data(urls):
    scholarships = []
    for url in urls:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            paragraphs = soup.find_all('p')
            scholarship_text = " ".join([para.get_text() for para in paragraphs])
            scholarships.append({"url": url, "content": scholarship_text})
    return scholarships

# Function to match scholarships using OpenAI
def match_scholarships(user_query, scholarships):
    matching_scholarships = []
    for scholarship in scholarships:
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=f"Match the following scholarship description to the user's query: {user_query}. "
                   f"Scholarship: {scholarship['content']}\n\nReturn 'Match' or 'No Match' with a reason.",
            max_tokens=100
        )
        result = response["choices"][0]["text"].strip()
        if "Match" in result:
            matching_scholarships.append({"url": scholarship["url"], "reason": result})
    return matching_scholarships

# URLs for scraping
urls = [
    "https://www.scu.edu/financialaid/cost-of-attendance/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/federal-grants/",
    "https://www.scu.edu/financialaid/deadlines/",
    "https://www.scu.edu/financialaid/financial-aid-basics/satisfactory-academic-progress---graduate/",
    "https://www.scu.edu/financialaid/financial-aid-basics/satisfactory-academic-progress---undergraduate/",
    "https://www.scu.edu/financialaid/new-fafsa-for-2024-2025/",
    "https://www.scu.edu/johnsonscholars/about-the-programaward/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/cal-grants/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/university-grants/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/merit-scholarships/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/academic-scholarships/",
    "https://www.scu.edu/financialaid/types-of-aid/scholarships-and-grants/outside-scholarships/",
    "https://www.scu.edu/financialaid/types-of-aid/federal-work-study/",
    "https://www.scu.edu/financialaid/types-of-aid/loans/",
    "https://www.scu.edu/financialaid/types-of-aid/graduate-aid-programs/",
    "https://bold.org/scholarships/new-beginnings-immigrant-scholarship/",
    "https://www.alert-1.com/company/scholarship/6747",
    "https://www.blankstyle.com/blankstyle-scholarship-fund",
    "https://www.latutors123.com/scholarships/innovation-in-education/",
    "https://lambprize.org/eligibility-selection-criteria-application-guidance/"
]

# Scrape scholarship data
scholarship_data = scrape_scholarship_data(urls)

# Streamlit App
def main():
    # App Title
    st.title("Scholarship Finder Bot üéì")
    st.markdown(
        """
        Welcome to the Scholarship Finder Bot!
        Enter your details below, and we'll help you find scholarships that match your profile and preferences.
        """
    )

    # Section 1: Basic Information
    st.header("üìù Basic Information")
    name = st.text_input("What is your full name?")
    email = st.text_input("Enter your email address:")
    age = st.number_input("Enter your age:", min_value=0, max_value=100, value=18)
    gender = st.selectbox("Select your gender:", ["Male", "Female", "Non-Binary", "Prefer Not to Say"])

    # Section 2: Academic Information
    st.header("üìö Academic Information")
    gpa = st.slider("Enter your GPA:", 0.0, 4.0, 3.0, step=0.1)
    major = st.text_input("Enter your academic major:")
    school_year = st.selectbox(
        "Select your school year:",
        ["High School Senior", "College Freshman", "Sophomore", "Junior", "Senior", "Graduate Student"]
    )
    standardized_test_scores = st.number_input(
        "Enter your SAT/ACT score (if applicable):",
        min_value=0,
        max_value=1600
    )

    # Section 3: Financial and Demographic Information
    st.header("üíµ Financial and Demographic Information")
    financial_need = st.selectbox("Do you require financial need-based scholarships?", ["Yes", "No"])
    ethnicity = st.text_input("Enter your ethnicity (optional):")
    residence_state = st.text_input("Enter your state of residence:")
    physical_disabilities = st.selectbox("Do you have any physical disabilities?", ["Yes", "No"])

    # Section 4: Preferences
    st.header("üéØ Preferences")
    scholarship_type = st.multiselect(
        "What types of scholarships are you interested in?",
        [
            "Merit Scholarships",
            "Need-Based Scholarships",
            "Federal Grants",
            "Athletic Scholarships",
            "Artistic Scholarships",
            "Graduate Aid",
            "Other"
        ]
    )
    causes = st.multiselect(
        "Select causes or values important to you (e.g., community service, sustainability, etc.):",
        ["Community Service", "Sustainability", "Social Justice", "Diversity", "STEM", "Arts"]
    )

    # Section 5: Submit Button
    if st.button("Find Scholarships"):
        # Combine user preferences into a query
        user_query = f"GPA: {gpa}, Major: {major}, Financial Need: {financial_need}, " \
                     f"Scholarship Type: {', '.join(scholarship_type)}, Causes: {', '.join(causes)}"

        # Match scholarships using OpenAI
        matches = match_scholarships(user_query, scholarship_data)

        # Display matching scholarships
        if matches:
            st.success("We found matching scholarships for you!")
            for match in matches:
                st.write(f"- [Scholarship Link]({match['url']}): {match['reason']}")
        else:
            st.error("No matching scholarships found. Please try adjusting your preferences.")

# Run the app
if __name__ == "__main__":
    main()
